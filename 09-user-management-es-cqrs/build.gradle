buildscript {
  ext {
    springBootVersion = "1.5.7.RELEASE"
    springCloudVersion = "Dalston.SR3"
    axonVersion = "3.0.6"
    kotlinVersion = "1.1.51"
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

plugins {
  id "java"
  id "idea"
  id "eclipse"
  // gradle dependencyUpdates -Drevision=release
  id "com.github.ben-manes.versions" version "0.15.0"
  id "org.springframework.boot" version "1.5.7.RELEASE" apply false
}

allprojects { subproject ->

  if (isDocker(subproject)) return

  apply plugin: "java"
  apply plugin: "kotlin"

  group = "daggerok"
  version = "0.0.1"
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenCentral()
  }

  dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  wrapper {
    gradleVersion = "4.2.1"
    distributionType = "ALL"
  }
}

subprojects { subproject ->

  if (isDocker(subproject)) return

  apply plugin: "org.springframework.boot"

  dependencies {
    compileOnly("org.projectlombok:lombok")

    compile("io.vavr:vavr:0.9.1")
    compile("io.javaslang:javaslang:2.0.6")
    compile("com.google.guava:guava:23.0")

    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
    compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")

    compile("org.springframework.boot:spring-boot-actuator")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion")

    testCompileOnly("org.projectlombok:lombok")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.cloud:spring-cloud-stream-test-support")
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
  }

  springBoot.executable = true
///*
  [test, build, bootRun].each { t ->
    t.dependsOn assemble, ":docker:composeUp"
    t.shouldRunAfter assemble, ":docker:composeUp"
    t.finalizedBy ":docker:composeDown"
  }
//*/
}

def isDocker(Project p) {
  def absPath = p.projectDir.absolutePath
  def projectPath = absPath.replaceFirst(rootDir.absolutePath, "")
  projectPath.contains("docker")
}
